// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250501150839_delete_user_email_isunique")]
    partial class delete_user_email_isunique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BankTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankReferenceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankReferenceCode")
                        .IsUnique();

                    b.HasIndex("ExpenseRequestId")
                        .IsUnique();

                    b.ToTable("BankTransactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personel"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse@gmail.com",
                            FirstName = "Ayşe",
                            IBAN = "TR480010200438320021981234",
                            LastName = "Karamanlı",
                            PasswordHash = new byte[] { 125, 77, 57, 201, 162, 177, 220, 32, 208, 50, 123, 66, 137, 47, 71, 12, 169, 3, 233, 9, 53, 89, 38, 114, 104, 121, 190, 138, 116, 253, 226, 243, 206, 152, 98, 122, 249, 131, 135, 43, 61, 122, 222, 155, 239, 189, 173, 183, 63, 132, 218, 29, 36, 197, 214, 89, 240, 43, 89, 27, 109, 62, 80, 117 },
                            PasswordSalt = new byte[] { 202, 177, 188, 92, 106, 56, 116, 83, 160, 44, 8, 42, 73, 57, 232, 55, 41, 168, 189, 157, 87, 208, 21, 137, 89, 244, 12, 91, 154, 203, 110, 65, 130, 104, 137, 120, 32, 192, 31, 132, 154, 26, 19, 95, 144, 33, 50, 97, 109, 118, 92, 61, 149, 45, 102, 213, 232, 1, 121, 215, 137, 67, 157, 18, 171, 105, 239, 222, 228, 243, 239, 38, 133, 228, 18, 195, 153, 98, 114, 6, 61, 210, 163, 45, 230, 188, 38, 112, 107, 100, 55, 77, 26, 243, 88, 57, 76, 136, 189, 47, 158, 125, 62, 191, 96, 215, 183, 200, 142, 200, 40, 76, 178, 47, 132, 54, 52, 188, 199, 44 },
                            Phone = "1234567890",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat@gmail.com",
                            FirstName = "Murat",
                            IBAN = "TR330006100519786457841234",
                            LastName = "Karamanlı",
                            PasswordHash = new byte[] { 125, 77, 57, 201, 162, 177, 220, 32, 208, 50, 123, 66, 137, 47, 71, 12, 169, 3, 233, 9, 53, 89, 38, 114, 104, 121, 190, 138, 116, 253, 226, 243, 206, 152, 98, 122, 249, 131, 135, 43, 61, 122, 222, 155, 239, 189, 173, 183, 63, 132, 218, 29, 36, 197, 214, 89, 240, 43, 89, 27, 109, 62, 80, 117 },
                            PasswordSalt = new byte[] { 202, 177, 188, 92, 106, 56, 116, 83, 160, 44, 8, 42, 73, 57, 232, 55, 41, 168, 189, 157, 87, 208, 21, 137, 89, 244, 12, 91, 154, 203, 110, 65, 130, 104, 137, 120, 32, 192, 31, 132, 154, 26, 19, 95, 144, 33, 50, 97, 109, 118, 92, 61, 149, 45, 102, 213, 232, 1, 121, 215, 137, 67, 157, 18, 171, 105, 239, 222, 228, 243, 239, 38, 133, 228, 18, 195, 153, 98, 114, 6, 61, 210, 163, 45, 230, 188, 38, 112, 107, 100, 55, 77, 26, 243, 88, 57, 76, 136, 189, 47, 158, 125, 62, 191, 96, 215, 183, 200, 142, 200, 40, 76, 178, 47, 132, 54, 52, 188, 199, 44 },
                            Phone = "0987654321",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.BankTransaction", b =>
                {
                    b.HasOne("Domain.Entities.ExpenseRequest", "ExpenseRequest")
                        .WithOne("BankTransaction")
                        .HasForeignKey("Domain.Entities.BankTransaction", "ExpenseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseRequest");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.HasOne("Domain.Entities.ExpenseCategory", "ExpenseCategory")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseCategory");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("ExpenseRequests");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.Navigation("BankTransaction");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("ExpenseRequests");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ExpenseRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
