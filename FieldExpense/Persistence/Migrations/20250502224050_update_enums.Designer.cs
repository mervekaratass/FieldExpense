// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250502224050_update_enums")]
    partial class update_enums
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BankTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankReferenceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankReferenceCode")
                        .IsUnique();

                    b.HasIndex("ExpenseRequestId")
                        .IsUnique();

                    b.ToTable("BankTransactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personel"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse@gmail.com",
                            FirstName = "Ayşe",
                            IBAN = "TR480010200438320021981234",
                            LastName = "Karamanlı",
                            PasswordHash = new byte[] { 96, 175, 200, 232, 193, 118, 227, 65, 112, 151, 75, 103, 144, 142, 231, 63, 27, 47, 136, 246, 11, 117, 107, 243, 181, 252, 89, 142, 251, 248, 44, 114, 149, 123, 102, 240, 165, 29, 119, 225, 156, 88, 231, 9, 238, 227, 56, 169, 213, 108, 172, 247, 208, 4, 150, 145, 97, 234, 237, 13, 202, 10, 87, 91, 187, 243, 139, 204, 46, 76, 196, 43, 88, 227, 248, 17, 255, 164, 143, 80, 131, 26, 199, 84, 247, 144, 175, 0, 164, 85, 33, 245, 99, 116, 240, 140, 253, 179, 216, 111, 245, 196, 90, 70, 230, 196, 232, 254, 54, 195, 27, 126, 138, 45, 30, 236, 155, 53, 82, 74, 63, 126, 194, 17, 51, 179, 185, 126 },
                            PasswordSalt = new byte[] { 94, 38, 193, 180, 158, 32, 113, 64, 80, 8, 155, 152, 202, 48, 166, 96, 167, 187, 193, 193, 35, 141, 49, 101, 74, 68, 98, 190, 37, 223, 92, 43, 213, 229, 144, 9, 51, 222, 156, 69, 93, 4, 42, 88, 197, 221, 85, 209, 57, 207, 154, 139, 59, 171, 199, 99, 130, 158, 163, 117, 197, 83, 127, 135 },
                            Phone = "1234567890",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat@gmail.com",
                            FirstName = "Murat",
                            IBAN = "TR330006100519786457841234",
                            LastName = "Karamanlı",
                            PasswordHash = new byte[] { 96, 175, 200, 232, 193, 118, 227, 65, 112, 151, 75, 103, 144, 142, 231, 63, 27, 47, 136, 246, 11, 117, 107, 243, 181, 252, 89, 142, 251, 248, 44, 114, 149, 123, 102, 240, 165, 29, 119, 225, 156, 88, 231, 9, 238, 227, 56, 169, 213, 108, 172, 247, 208, 4, 150, 145, 97, 234, 237, 13, 202, 10, 87, 91, 187, 243, 139, 204, 46, 76, 196, 43, 88, 227, 248, 17, 255, 164, 143, 80, 131, 26, 199, 84, 247, 144, 175, 0, 164, 85, 33, 245, 99, 116, 240, 140, 253, 179, 216, 111, 245, 196, 90, 70, 230, 196, 232, 254, 54, 195, 27, 126, 138, 45, 30, 236, 155, 53, 82, 74, 63, 126, 194, 17, 51, 179, 185, 126 },
                            PasswordSalt = new byte[] { 94, 38, 193, 180, 158, 32, 113, 64, 80, 8, 155, 152, 202, 48, 166, 96, 167, 187, 193, 193, 35, 141, 49, 101, 74, 68, 98, 190, 37, 223, 92, 43, 213, 229, 144, 9, 51, 222, 156, 69, 93, 4, 42, 88, 197, 221, 85, 209, 57, 207, 154, 139, 59, 171, 199, 99, 130, 158, 163, 117, 197, 83, 127, 135 },
                            Phone = "0987654321",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.BankTransaction", b =>
                {
                    b.HasOne("Domain.Entities.ExpenseRequest", "ExpenseRequest")
                        .WithOne("BankTransaction")
                        .HasForeignKey("Domain.Entities.BankTransaction", "ExpenseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseRequest");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.HasOne("Domain.Entities.ExpenseCategory", "ExpenseCategory")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseCategory");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("ExpenseRequests");
                });

            modelBuilder.Entity("Domain.Entities.ExpenseRequest", b =>
                {
                    b.Navigation("BankTransaction");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("ExpenseRequests");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ExpenseRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
